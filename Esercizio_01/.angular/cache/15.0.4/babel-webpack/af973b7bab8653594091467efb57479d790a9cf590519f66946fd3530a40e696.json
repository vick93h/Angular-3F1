{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst webdriver_commands_1 = require(\"./webdriver_commands\");\nconst HIGHLIGHT_COMMAND = [webdriver_commands_1.CommandName.ElementClick, webdriver_commands_1.CommandName.ElementSendKeys, webdriver_commands_1.CommandName.ElementClear];\nlet clientScripts = require('./client_scripts/highlight.js');\n/**\n * A barrier that delays forwarding WebDriver commands that can affect the app (ie, clicks or\n * sending text) for a fixed amount of time. During the delay, the element that's the target\n * of the command will be highlighted by drawing a transparent div on top of it.\n */\nclass HighlightDelayBarrier {\n  constructor(client, delay) {\n    this.client = client;\n    this.delay = delay;\n  }\n  isHighlightCommand(command) {\n    return HIGHLIGHT_COMMAND.indexOf(command.commandName) !== -1;\n  }\n  highlightData(top, left, width, height) {\n    return JSON.stringify({\n      script: 'return (' + clientScripts.HIGHLIGHT_FN + ').apply(null, arguments);',\n      args: [top, left, width, height]\n    });\n  }\n  removeHighlightData() {\n    return JSON.stringify({\n      script: 'return (' + clientScripts.REMOVE_HIGHLIGHT_FN + ').apply(null, arguments);',\n      args: []\n    });\n  }\n  // Simple promise-based sleep so we can use async/await\n  sleep(delay) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, delay);\n    });\n  }\n  onCommand(command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.isHighlightCommand(command) || !this.delay) {\n        return;\n      }\n      const sessId = command.sessionId;\n      const el = command.getParam('elementId');\n      // The W3C spec does have a 'getRect', but the standalone server doesn't support it yet.\n      const loc = yield this.client.getLocation(sessId, el);\n      const size = yield this.client.getSize(sessId, el);\n      // Set the highlight\n      yield this.client.execute(sessId, this.highlightData(loc['y'], loc['x'], size['width'], size['height']));\n      // Wait\n      yield this.sleep(this.delay);\n      // Clear the highlight\n      yield this.client.execute(sessId, this.removeHighlightData());\n    });\n  }\n}\nexports.HighlightDelayBarrier = HighlightDelayBarrier;\n//# sourceMappingURL=highlight_delay_barrier.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}