{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * This is an mock implementation of the Driver Provider.\n * It returns a fake webdriver and never actually contacts a selenium\n * server.\n */\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst driverProvider_1 = require(\"./driverProvider\");\nclass MockExecutor {\n  execute(command) {}\n}\nexports.MockExecutor = MockExecutor;\nclass Mock extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n  }\n  /**\n   * An execute function that returns a promise with a test value.\n   */\n  execute() {\n    let deferred = q.defer();\n    deferred.resolve({\n      value: 'test_response'\n    });\n    return deferred.promise;\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @public\n   * @return {q.promise} A promise which will resolve immediately.\n   */\n  setupDriverEnv() {\n    return q.fcall(function () {});\n  }\n  /**\n   * Create a new driver.\n   *\n   * @public\n   * @override\n   * @return webdriver instance\n   */\n  getNewDriver() {\n    let mockSession = new selenium_webdriver_1.Session('test_session_id', {});\n    let newDriver = new selenium_webdriver_1.WebDriver(mockSession, new MockExecutor());\n    this.drivers_.push(newDriver);\n    return newDriver;\n  }\n}\nexports.Mock = Mock;\n//# sourceMappingURL=mock.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}