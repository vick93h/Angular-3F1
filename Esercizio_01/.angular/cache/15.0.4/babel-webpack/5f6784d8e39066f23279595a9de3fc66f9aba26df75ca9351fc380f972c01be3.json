{"ast":null,"code":"var util = require(\"util\");\nvar BaseClient = require(\"./client\");\nvar extend = require(\"./extend\");\nfunction ApiBaseClient(settings) {\n  this.server = {\n    host: \"api.browserstack.com\"\n  };\n  BaseClient.call(this, settings);\n}\nutil.inherits(ApiBaseClient, BaseClient);\n\n// public API\nextend(ApiBaseClient.prototype, {\n  getBrowsers: function (fn) {\n    this._getBrowsers(function (error, browsers) {\n      if (!error) {\n        this.updateLatest(browsers);\n      }\n      fn(error, browsers);\n    }.bind(this));\n  },\n  createWorker: function (options, fn) {\n    if (options[this.versionField] === \"latest\") {\n      return this.getLatest(options, function (error, version) {\n        if (error) {\n          return fn(error);\n        }\n        options = extend({}, options);\n        options[this.versionField] = version;\n        this.createWorker(options, fn);\n      }.bind(this));\n    }\n    var data = JSON.stringify(options);\n    this.request({\n      path: this.path(\"/worker\"),\n      method: \"POST\"\n    }, data, fn);\n  },\n  getWorker: function (id, fn) {\n    this.request({\n      path: this.path(\"/worker/\" + id)\n    }, fn);\n  },\n  changeUrl: function (id, options, fn) {\n    var data = JSON.stringify(options);\n    this.request({\n      path: this.path(\"/worker/\" + id + \"/url.json\"),\n      method: \"PUT\"\n    }, data, fn);\n  },\n  terminateWorker: function (id, fn) {\n    this.request({\n      path: this.path(\"/worker/\" + id),\n      method: \"DELETE\"\n    }, fn);\n  },\n  getWorkers: function (fn) {\n    this.request({\n      path: this.path(\"/workers\")\n    }, fn);\n  },\n  getLatest: function (browser, fn) {\n    var latest = this.latest;\n    if (typeof browser === \"function\") {\n      fn = browser;\n      browser = null;\n    }\n\n    // there may be a lot of createWorker() calls with \"latest\" version\n    // so minimize the number of calls to getBrowsers()\n    if (this.latestPending) {\n      return setTimeout(function () {\n        this.getLatest(browser, fn);\n      }.bind(this), 50);\n    }\n\n    // only cache browsers for one day\n    if (!latest || this.latestUpdate < new Date() - 864e5) {\n      this.latestPending = true;\n      return this.getBrowsers(function (error) {\n        this.latestPending = false;\n        if (error) {\n          return fn(error);\n        }\n        this.getLatest(browser, fn);\n      }.bind(this));\n    }\n    process.nextTick(function () {\n      fn(null, browser ? latest[this.getBrowserId(browser)] : extend({}, latest));\n    }.bind(this));\n  },\n  takeScreenshot: function (id, fn) {\n    this.request({\n      path: this.path(\"/worker/\" + id + \"/screenshot.json\")\n    }, fn);\n  }\n});\n\n// internal API\nextend(ApiBaseClient.prototype, {\n  latest: null,\n  latestUpdate: 0,\n  latestPending: false,\n  path: function (path) {\n    return \"/\" + this.version + path;\n  },\n  updateLatest: function (browsers) {\n    var latest = this.latest = {};\n    var getBrowserId = this.getBrowserId.bind(this);\n    var versionField = this.versionField;\n    this.latestUpdate = new Date();\n    browsers.forEach(function (browser) {\n      var version = browser[versionField];\n      var browserId = getBrowserId(browser);\n\n      // ignore devices that don't have versions\n      if (!version) {\n        return;\n      }\n\n      // ignore pre-release versions\n      if (/\\s/.test(version)) {\n        return;\n      }\n      if (parseFloat(version) > (parseFloat(latest[browserId]) || 0)) {\n        latest[browserId] = version;\n      }\n    });\n  },\n  getBrowserId: function (browser) {\n    return this._getBrowserId(browser).toLowerCase();\n  }\n});\n\n// Versions\n\nApiBaseClient.versions = {};\nApiBaseClient.latestVersion = 0;\nApiBaseClient.createVersion = function (version, prototype) {\n  function ApiClient(settings) {\n    ApiBaseClient.call(this, settings);\n  }\n  util.inherits(ApiClient, ApiBaseClient);\n  ApiClient.prototype.version = version;\n  extend(ApiClient.prototype, prototype);\n  ApiBaseClient.versions[version] = ApiClient;\n  ApiBaseClient.latestVersion = Math.max(ApiBaseClient.latestVersion, version);\n};\nApiBaseClient.createVersion(1, {\n  useHttp: true,\n  versionField: \"version\",\n  _getBrowsers: function (fn) {\n    this.request({\n      path: this.path(\"/browsers\")\n    }, fn);\n  },\n  _getBrowserId: function (browser) {\n    return browser.browser;\n  }\n});\nApiBaseClient.createVersion(2, {\n  useHttp: true,\n  versionField: \"version\",\n  _getBrowsers: function (fn) {\n    this.request({\n      path: this.path(\"/browsers\")\n    }, function (error, osBrowsers) {\n      if (error) {\n        return fn(error);\n      }\n      fn(null, [].concat.apply([], Object.keys(osBrowsers).map(function (os) {\n        return osBrowsers[os].map(function (browser) {\n          browser.os = os;\n          return browser;\n        });\n      })));\n    });\n  },\n  _getBrowserId: function (browser) {\n    return browser.os + \":\" + (browser.browser || browser.device);\n  }\n});\nApiBaseClient.createVersion(3, {\n  useHttp: true,\n  versionField: \"browser_version\",\n  _getBrowsers: function (fn) {\n    this.request({\n      path: this.path(\"/browsers?flat=true\")\n    }, fn);\n  },\n  _getBrowserId: function (browser) {\n    var id = browser.os + \":\" + browser.os_version + \":\" + browser.browser;\n    if (browser.device) {\n      id += \":\" + browser.device;\n    }\n    return id;\n  },\n  getApiStatus: function (fn) {\n    this.request({\n      path: this.path(\"/status\")\n    }, fn);\n  }\n});\nApiBaseClient.createVersion(4, {\n  versionField: \"browser_version\",\n  _getBrowsers: function (fn) {\n    this.request({\n      path: this.path(\"/browsers?flat=true\")\n    }, fn);\n  },\n  _getBrowserId: function (browser) {\n    var id = browser.os + \":\" + browser.os_version + \":\" + browser.browser;\n    if (browser.device) {\n      id += \":\" + browser.device;\n    }\n    return id;\n  },\n  getApiStatus: function (fn) {\n    this.request({\n      path: this.path(\"/status\")\n    }, fn);\n  }\n});\nmodule.exports = {\n  createClient: function (settings) {\n    var ApiClient = ApiBaseClient.versions[settings.version || ApiBaseClient.latestVersion];\n    if (!ApiClient) {\n      throw new Error(\"Invalid version\");\n    }\n    return new ApiClient(settings);\n  }\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}