{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar Default = {\n  placement: 'center',\n  backdropClasses: 'bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-40',\n  backdrop: 'dynamic',\n  closable: true,\n  onHide: function () {},\n  onShow: function () {},\n  onToggle: function () {}\n};\nvar Modal = /** @class */function () {\n  function Modal(targetEl, options) {\n    if (targetEl === void 0) {\n      targetEl = null;\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    this._targetEl = targetEl;\n    this._options = __assign(__assign({}, Default), options);\n    this._isHidden = true;\n    this._backdropEl = null;\n    this._init();\n  }\n  Modal.prototype._init = function () {\n    var _this = this;\n    if (this._targetEl) {\n      this._getPlacementClasses().map(function (c) {\n        _this._targetEl.classList.add(c);\n      });\n    }\n  };\n  Modal.prototype._createBackdrop = function () {\n    var _a;\n    if (this._isHidden) {\n      var backdropEl = document.createElement('div');\n      backdropEl.setAttribute('modal-backdrop', '');\n      (_a = backdropEl.classList).add.apply(_a, this._options.backdropClasses.split(' '));\n      document.querySelector('body').append(backdropEl);\n      this._backdropEl = backdropEl;\n    }\n  };\n  Modal.prototype._destroyBackdropEl = function () {\n    if (!this._isHidden) {\n      document.querySelector('[modal-backdrop]').remove();\n    }\n  };\n  Modal.prototype._setupModalCloseEventListeners = function () {\n    var _this = this;\n    if (this._options.backdrop === 'dynamic') {\n      this._clickOutsideEventListener = function (ev) {\n        _this._handleOutsideClick(ev.target);\n      };\n      this._targetEl.addEventListener('click', this._clickOutsideEventListener, true);\n    }\n    this._keydownEventListener = function (ev) {\n      if (ev.key === 'Escape') {\n        _this.hide();\n      }\n    };\n    document.body.addEventListener('keydown', this._keydownEventListener, true);\n  };\n  Modal.prototype._removeModalCloseEventListeners = function () {\n    if (this._options.backdrop === 'dynamic') {\n      this._targetEl.removeEventListener('click', this._clickOutsideEventListener, true);\n    }\n    document.body.removeEventListener('keydown', this._keydownEventListener, true);\n  };\n  Modal.prototype._handleOutsideClick = function (target) {\n    if (target === this._targetEl || target === this._backdropEl && this.isVisible()) {\n      this.hide();\n    }\n  };\n  Modal.prototype._getPlacementClasses = function () {\n    switch (this._options.placement) {\n      // top\n      case 'top-left':\n        return ['justify-start', 'items-start'];\n      case 'top-center':\n        return ['justify-center', 'items-start'];\n      case 'top-right':\n        return ['justify-end', 'items-start'];\n      // center\n      case 'center-left':\n        return ['justify-start', 'items-center'];\n      case 'center':\n        return ['justify-center', 'items-center'];\n      case 'center-right':\n        return ['justify-end', 'items-center'];\n      // bottom\n      case 'bottom-left':\n        return ['justify-start', 'items-end'];\n      case 'bottom-center':\n        return ['justify-center', 'items-end'];\n      case 'bottom-right':\n        return ['justify-end', 'items-end'];\n      default:\n        return ['justify-center', 'items-center'];\n    }\n  };\n  Modal.prototype.toggle = function () {\n    if (this._isHidden) {\n      this.show();\n    } else {\n      this.hide();\n    }\n    // callback function\n    this._options.onToggle(this);\n  };\n  Modal.prototype.show = function () {\n    if (this.isHidden) {\n      this._targetEl.classList.add('flex');\n      this._targetEl.classList.remove('hidden');\n      this._targetEl.setAttribute('aria-modal', 'true');\n      this._targetEl.setAttribute('role', 'dialog');\n      this._targetEl.removeAttribute('aria-hidden');\n      this._createBackdrop();\n      this._isHidden = false;\n      // prevent body scroll\n      document.body.classList.add('overflow-hidden');\n      // Add keyboard event listener to the document\n      if (this._options.closable) {\n        this._setupModalCloseEventListeners();\n      }\n      // callback function\n      this._options.onShow(this);\n    }\n  };\n  Modal.prototype.hide = function () {\n    if (this.isVisible) {\n      this._targetEl.classList.add('hidden');\n      this._targetEl.classList.remove('flex');\n      this._targetEl.setAttribute('aria-hidden', 'true');\n      this._targetEl.removeAttribute('aria-modal');\n      this._targetEl.removeAttribute('role');\n      this._destroyBackdropEl();\n      this._isHidden = true;\n      // re-apply body scroll\n      document.body.classList.remove('overflow-hidden');\n      if (this._options.closable) {\n        this._removeModalCloseEventListeners();\n      }\n      // callback function\n      this._options.onHide(this);\n    }\n  };\n  Modal.prototype.isVisible = function () {\n    return !this._isHidden;\n  };\n  Modal.prototype.isHidden = function () {\n    return this._isHidden;\n  };\n  return Modal;\n}();\nif (typeof window !== 'undefined') {\n  window.Modal = Modal;\n}\nvar getModalInstance = function (id, instances) {\n  if (instances.some(function (modalInstance) {\n    return modalInstance.id === id;\n  })) {\n    return instances.find(function (modalInstance) {\n      return modalInstance.id === id;\n    });\n  }\n  return null;\n};\nexport function initModals() {\n  var modalInstances = [];\n  // initiate modal based on data-modal-target\n  document.querySelectorAll('[data-modal-target]').forEach(function ($triggerEl) {\n    var modalId = $triggerEl.getAttribute('data-modal-target');\n    var $modalEl = document.getElementById(modalId);\n    if ($modalEl) {\n      var placement = $modalEl.getAttribute('data-modal-placement');\n      var backdrop = $modalEl.getAttribute('data-modal-backdrop');\n      if (!getModalInstance(modalId, modalInstances)) {\n        modalInstances.push({\n          id: modalId,\n          object: new Modal($modalEl, {\n            placement: placement ? placement : Default.placement,\n            backdrop: backdrop ? backdrop : Default.backdrop\n          })\n        });\n      }\n    } else {\n      console.error(\"Modal with id \".concat(modalId, \" does not exist. Are you sure that the data-modal-target attribute points to the correct modal id?.\"));\n    }\n  });\n  // support pre v1.6.0 data-modal-toggle initialization\n  document.querySelectorAll('[data-modal-toggle]').forEach(function ($triggerEl) {\n    var modalId = $triggerEl.getAttribute('data-modal-toggle');\n    var $modalEl = document.getElementById(modalId);\n    if ($modalEl) {\n      var placement = $modalEl.getAttribute('data-modal-placement');\n      var backdrop = $modalEl.getAttribute('data-modal-backdrop');\n      var modal_1 = getModalInstance(modalId, modalInstances);\n      if (!modal_1) {\n        modal_1 = {\n          id: modalId,\n          object: new Modal($modalEl, {\n            placement: placement ? placement : Default.placement,\n            backdrop: backdrop ? backdrop : Default.backdrop\n          })\n        };\n        modalInstances.push(modal_1);\n      }\n      $triggerEl.addEventListener('click', function () {\n        modal_1.object.toggle();\n      });\n    } else {\n      console.error(\"Modal with id \".concat(modalId, \" does not exist. Are you sure that the data-modal-toggle attribute points to the correct modal id?\"));\n    }\n  });\n  // show modal on click if exists based on id\n  document.querySelectorAll('[data-modal-show]').forEach(function ($triggerEl) {\n    var modalId = $triggerEl.getAttribute('data-modal-show');\n    var $modalEl = document.getElementById(modalId);\n    if ($modalEl) {\n      var modal_2 = getModalInstance(modalId, modalInstances);\n      if (modal_2) {\n        $triggerEl.addEventListener('click', function () {\n          if (modal_2.object.isHidden) {\n            modal_2.object.show();\n          }\n        });\n      } else {\n        console.error(\"Modal with id \".concat(modalId, \" has not been initialized. Please initialize it using the data-modal-target attribute.\"));\n      }\n    } else {\n      console.error(\"Modal with id \".concat(modalId, \" does not exist. Are you sure that the data-modal-show attribute points to the correct modal id?\"));\n    }\n  });\n  // hide modal on click if exists based on id\n  document.querySelectorAll('[data-modal-hide]').forEach(function ($triggerEl) {\n    var modalId = $triggerEl.getAttribute('data-modal-hide');\n    var $modalEl = document.getElementById(modalId);\n    if ($modalEl) {\n      var modal_3 = getModalInstance(modalId, modalInstances);\n      if (modal_3) {\n        $triggerEl.addEventListener('click', function () {\n          if (modal_3.object.isVisible) {\n            modal_3.object.hide();\n          }\n        });\n      } else {\n        console.error(\"Modal with id \".concat(modalId, \" has not been initialized. Please initialize it using the data-modal-target attribute.\"));\n      }\n    } else {\n      console.error(\"Modal with id \".concat(modalId, \" does not exist. Are you sure that the data-modal-hide attribute points to the correct modal id?\"));\n    }\n  });\n}\nexport default Modal;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}