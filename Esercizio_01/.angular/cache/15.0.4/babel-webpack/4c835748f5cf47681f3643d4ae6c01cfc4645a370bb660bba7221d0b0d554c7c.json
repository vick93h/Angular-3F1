{"ast":null,"code":"'use strict';\n\nvar escapeStringRegexp = require('escape-string-regexp');\nvar ansiStyles = require('ansi-styles');\nvar stripAnsi = require('strip-ansi');\nvar hasAnsi = require('has-ansi');\nvar supportsColor = require('supports-color');\nvar defineProps = Object.defineProperties;\nvar isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);\nfunction Chalk(options) {\n  // detect mode if not set manually\n  this.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;\n}\n\n// use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n  ansiStyles.blue.open = '\\u001b[94m';\n}\nvar styles = function () {\n  var ret = {};\n  Object.keys(ansiStyles).forEach(function (key) {\n    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n    ret[key] = {\n      get: function () {\n        return build.call(this, this._styles.concat(key));\n      }\n    };\n  });\n  return ret;\n}();\nvar proto = defineProps(function chalk() {}, styles);\nfunction build(_styles) {\n  var builder = function () {\n    return applyStyle.apply(builder, arguments);\n  };\n  builder._styles = _styles;\n  builder.enabled = this.enabled;\n  // __proto__ is used because we must return a function, but there is\n  // no way to create a function with a different prototype.\n  /* eslint-disable no-proto */\n  builder.__proto__ = proto;\n  return builder;\n}\nfunction applyStyle() {\n  // support varags, but simply cast to string in case there's only one arg\n  var args = arguments;\n  var argsLen = args.length;\n  var str = argsLen !== 0 && String(arguments[0]);\n  if (argsLen > 1) {\n    // don't slice `arguments`, it prevents v8 optimizations\n    for (var a = 1; a < argsLen; a++) {\n      str += ' ' + args[a];\n    }\n  }\n  if (!this.enabled || !str) {\n    return str;\n  }\n  var nestedStyles = this._styles;\n  var i = nestedStyles.length;\n\n  // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n  // see https://github.com/chalk/chalk/issues/58\n  // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n  var originalDim = ansiStyles.dim.open;\n  if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {\n    ansiStyles.dim.open = '';\n  }\n  while (i--) {\n    var code = ansiStyles[nestedStyles[i]];\n\n    // Replace any instances already present with a re-opening code\n    // otherwise only the part of the string until said closing code\n    // will be colored, and the rest will simply be 'plain'.\n    str = code.open + str.replace(code.closeRe, code.open) + code.close;\n  }\n\n  // Reset the original 'dim' if we changed it to work around the Windows dimmed gray issue.\n  ansiStyles.dim.open = originalDim;\n  return str;\n}\nfunction init() {\n  var ret = {};\n  Object.keys(styles).forEach(function (name) {\n    ret[name] = {\n      get: function () {\n        return build.call(this, [name]);\n      }\n    };\n  });\n  return ret;\n}\ndefineProps(Chalk.prototype, init());\nmodule.exports = new Chalk();\nmodule.exports.styles = ansiStyles;\nmodule.exports.hasColor = hasAnsi;\nmodule.exports.stripColor = stripAnsi;\nmodule.exports.supportsColor = supportsColor;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}