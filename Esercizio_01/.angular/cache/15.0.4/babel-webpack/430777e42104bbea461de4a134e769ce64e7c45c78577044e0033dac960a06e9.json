{"ast":null,"code":"\"use strict\";\n\n/* global self, window, module, global, require */\nmodule.exports = function () {\n  \"use strict\";\n\n  var globalObject = void 0;\n  function isFunction(x) {\n    return typeof x === \"function\";\n  }\n\n  // Seek the global object\n  if (global !== undefined) {\n    globalObject = global;\n  } else if (window !== undefined && window.document) {\n    globalObject = window;\n  } else {\n    globalObject = self;\n  }\n\n  // Test for any native promise implementation, and if that\n  // implementation appears to conform to the specificaton.\n  // This code mostly nicked from the es6-promise module polyfill\n  // and then fooled with.\n  var hasPromiseSupport = function () {\n    // No promise object at all, and it's a non-starter\n    if (!globalObject.hasOwnProperty(\"Promise\")) {\n      return false;\n    }\n\n    // There is a Promise object. Does it conform to the spec?\n    var P = globalObject.Promise;\n\n    // Some of these methods are missing from\n    // Firefox/Chrome experimental implementations\n    if (!P.hasOwnProperty(\"resolve\") || !P.hasOwnProperty(\"reject\")) {\n      return false;\n    }\n    if (!P.hasOwnProperty(\"all\") || !P.hasOwnProperty(\"race\")) {\n      return false;\n    }\n\n    // Older version of the spec had a resolver object\n    // as the arg rather than a function\n    return function () {\n      var resolve = void 0;\n      var p = new globalObject.Promise(function (r) {\n        resolve = r;\n      });\n      if (p) {\n        return isFunction(resolve);\n      }\n      return false;\n    }();\n  }();\n\n  // Export the native Promise implementation if it\n  // looks like it matches the spec\n  if (hasPromiseSupport) {\n    return globalObject.Promise;\n  }\n\n  //  Otherwise, return the es6-promise polyfill by @jaffathecake.\n  return require(\"es6-promise\").Promise;\n}();","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}