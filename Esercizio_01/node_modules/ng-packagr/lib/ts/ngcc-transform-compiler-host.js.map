{"version":3,"file":"ngcc-transform-compiler-host.js","sourceRoot":"","sources":["../../../src/lib/ts/ngcc-transform-compiler-host.ts"],"names":[],"mappings":";;;;;;AAAA,4DAA4B;AAG5B,SAAgB,yBAAyB,CACvC,YAA6B,EAC7B,eAAmC,EACnC,aAA4B,EAC5B,qBAA+C;IAE/C,OAAO;QACL,GAAG,YAAY;QACf,kBAAkB,EAAE,CAAC,WAAqB,EAAE,cAAsB,EAAE,EAAE;YACpE,OAAO,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBAClC,MAAM,EAAE,cAAc,EAAE,GAAG,oBAAE,CAAC,iBAAiB,CAC7C,UAAU,EACV,cAAc,EACd,eAAe,EACf,YAAY,EACZ,qBAAqB,CACtB,CAAC;gBAEF,IAAI,cAAc,EAAE;oBAClB,aAAa,CAAC,aAAa,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;iBACzD;gBAED,OAAO,cAAc,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC;QACD,8BAA8B,EAAE,CAC9B,2BAA0D,EAC1D,cAAsB,EACtB,mBAAiD,EACjD,EAAE;YACF,OAAO,2BAA2B,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC5C,MAAM,UAAU,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAEnE,MAAM,EAAE,8BAA8B,EAAE,GAAG,oBAAE,CAAC,6BAA6B,CACzE,UAAU,EACV,cAAc,EACd,eAAe,EACf,YAAY,EACZ,mBAAmB,CACpB,CAAC;gBAEF,IAAI,8BAA8B,EAAE;oBAClC,aAAa,CAAC,aAAa,CAAC,UAAU,EAAE,8BAA8B,CAAC,CAAC;iBACzE;gBAED,OAAO,8BAA8B,CAAC;YACxC,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC;AAjDD,8DAiDC","sourcesContent":["import ts from 'typescript';\nimport { NgccProcessor } from '../ngc/ngcc-processor';\n\nexport function ngccTransformCompilerHost(\n  compilerHost: ts.CompilerHost,\n  compilerOptions: ts.CompilerOptions,\n  ngccProcessor: NgccProcessor,\n  moduleResolutionCache: ts.ModuleResolutionCache,\n): ts.CompilerHost {\n  return {\n    ...compilerHost,\n    resolveModuleNames: (moduleNames: string[], containingFile: string) => {\n      return moduleNames.map(moduleName => {\n        const { resolvedModule } = ts.resolveModuleName(\n          moduleName,\n          containingFile,\n          compilerOptions,\n          compilerHost,\n          moduleResolutionCache,\n        );\n\n        if (resolvedModule) {\n          ngccProcessor.processModule(moduleName, resolvedModule);\n        }\n\n        return resolvedModule;\n      });\n    },\n    resolveTypeReferenceDirectives: (\n      typeReferenceDirectiveNames: string[] | ts.FileReference[],\n      containingFile: string,\n      redirectedReference?: ts.ResolvedProjectReference,\n    ) => {\n      return typeReferenceDirectiveNames.map(name => {\n        const moduleName = typeof name === 'string' ? name : name.fileName;\n\n        const { resolvedTypeReferenceDirective } = ts.resolveTypeReferenceDirective(\n          moduleName,\n          containingFile,\n          compilerOptions,\n          compilerHost,\n          redirectedReference,\n        );\n\n        if (resolvedTypeReferenceDirective) {\n          ngccProcessor.processModule(moduleName, resolvedTypeReferenceDirective);\n        }\n\n        return resolvedTypeReferenceDirective;\n      });\n    },\n  };\n}\n"]}